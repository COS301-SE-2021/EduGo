# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, question_id: int=None, question: str=None, options: bool=None, answer: bool=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param question_id: The question_id of this Question.  # noqa: E501
        :type question_id: int
        :param question: The question of this Question.  # noqa: E501
        :type question: str
        :param options: The options of this Question.  # noqa: E501
        :type options: bool
        :param answer: The answer of this Question.  # noqa: E501
        :type answer: bool
        """
        self.swagger_types = {
            'question_id': int,
            'question': str,
            'options': bool,
            'answer': bool
        }

        self.attribute_map = {
            'question_id': 'question_id',
            'question': 'question',
            'options': 'options',
            'answer': 'answer'
        }
        self._question_id = question_id
        self._question = question
        self._options = options
        self._answer = answer

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self) -> int:
        """Gets the question_id of this Question.


        :return: The question_id of this Question.
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id: int):
        """Sets the question_id of this Question.


        :param question_id: The question_id of this Question.
        :type question_id: int
        """

        self._question_id = question_id

    @property
    def question(self) -> str:
        """Gets the question of this Question.


        :return: The question of this Question.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Question.


        :param question: The question of this Question.
        :type question: str
        """

        self._question = question

    @property
    def options(self) -> bool:
        """Gets the options of this Question.


        :return: The options of this Question.
        :rtype: bool
        """
        return self._options

    @options.setter
    def options(self, options: bool):
        """Sets the options of this Question.


        :param options: The options of this Question.
        :type options: bool
        """

        self._options = options

    @property
    def answer(self) -> bool:
        """Gets the answer of this Question.


        :return: The answer of this Question.
        :rtype: bool
        """
        return self._answer

    @answer.setter
    def answer(self, answer: bool):
        """Sets the answer of this Question.


        :param answer: The answer of this Question.
        :type answer: bool
        """

        self._answer = answer
